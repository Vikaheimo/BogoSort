function run() {
    gamerule maxCommandChainLength 999999999;
    $sorting = true;
    $iteration = 0;
    BogoSort.generateRandomArray();
    BogoSort.printIteration();
    BogoSort.asyncWhile();
}

class BogoSort {
    function asyncWhile() {
        $iteration++;
        BogoSort.shuffle();
        $iterations = $iteration;
        $iterations %= PRINTITERATIONSEVERY;
        if ($iterations == 0) { 
            BogoSort.printIteration(); 
        }
        $sorting = execute run BogoSort.isSorted();
        $temp = $iteration;
        $temp %= ITERATIONSPERTICK;
        if (!$sorting && ($temp != 0)) {
            BogoSort.asyncWhile();
        } else if (!$sorting) {
            schedule function BogoSort.asyncWhile() 1t append;
        } else {
            modifyStorage(array, sorted) set from storage bogosort:array sorting;
            modifyStorage(array, value) set from storage bogosort:array sorted;
            schedule function BogoSort.complete() 1t append;
        }
    }

    function shuffle() {
        modifyStorage(array, sorted) set value [];
        modifyStorage(array, sorting) set value [];
        modifyStorage(array, sorting) set from storage bogosort:array value;
        Hardcode.repeat(
            "index", // indexString
            () => { // arrowFunction
                if (predicate bogosort:chance) {
                    if (predicate bogosort:chance) {
                        modifyStorage(array, sorted) append from storage bogosort:array sorting[index];
                    } else if (predicate bogosort:chance) {
                        modifyStorage(array, sorted) prepend from storage bogosort:array sorting[index];
                    } else {
                        modifyStorage(array, sorted) insert index from storage bogosort:array sorting[index];
                    }
                } else {
                    if (predicate bogosort:chance) {
                        modifyStorage(array, sorted) prepend from storage bogosort:array sorting[index];
                    } else {
                        modifyStorage(array, sorted) append from storage bogosort:array sorting[index];
                    }
                }
            },
            0, // start
            LENGTH, // stop
            1 // step
        );
        modifyStorage(array, value) set from storage bogosort:array sorted;
    }

    function isSorted() {
        $prev = -999;
        Hardcode.repeat(
            "index", // indexString
            () => { // arrowFunction
                $temp = data get storage bogosort:array sorting[index];
                if ($prev > $temp) {
                    return 0;
                }
                $prev = $temp;
            },
            0, // start
            LENGTH, // stop
            1 // step
        );
        return 1;
    }

    function complete() {
        tellraw @a[tag=bogosort] "Result:";
        BogoSort.printIteration();
        gamerule maxCommandChainLength 65536;
    }

    function generateRandomArray() {
        modifyStorage(array, value) set value [];
        for ($i = 0; $i < LENGTH; $i++) {
            $bogosort_random = Math.random(0, 200);
            $bogosort_random -= 100;
            execute store result storage bogosort:array single int 1 run scoreboard players get $bogosort_random __variable__;
            modifyStorage(array, value) append from storage bogosort:array single;
        }
    }

    function printIteration() {
        tellraw @a[tag=bogosort] [
            {
                "score": {
                    "objective": "__variable__", 
                    "name": "$iteration"
                },
                "color": "gray"
            },
            ", ",
            {
                "storage": "bogosort:array",
                "nbt": "value",
                "color": "gray"
            }
        ];
    }
}

new predicates(chance) {
    "condition": "minecraft:random_chance",
    "chance": 0.5
}